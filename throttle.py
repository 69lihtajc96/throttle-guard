import subprocess
import logging
import ipaddress

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class BaseLocker:
    interface: str = "wlan1"
    target_devices_list: list
    dns_list: list
    ip_list: list

    block_udp: bool = True
    block_dns: bool = True

    def lock(self):
        logging.info(f"‚õî –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ {self.__class__.__name__} –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        # 1) –ó–∞–ø—É—Å–∫–∞–µ–º ARP-—Å–ø—É—Ñ–∏–Ω–≥, —á—Ç–æ–±—ã —Ç—Ä–∞—Ñ–∏–∫ —à–µ–ª —á–µ—Ä–µ–∑ –Ω–∞—Å
        self.enable_arp_spoofing()
        # 2) –ß–∏—Å—Ç–∏–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞
        self.run_command("sudo iptables -F")

        # 3) –î–æ–±–∞–≤–ª—è–µ–º DROP-–ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è IP-–¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        for device_ip in self.target_devices_list:
            for ip in self.ip_list:
                self.run_command(f"sudo iptables -A FORWARD -s {device_ip} -d {ip} -j DROP")
                self.run_command(f"sudo iptables -A OUTPUT -s {device_ip} -d {ip} -j DROP")
                if self.block_udp:
                    self.run_command(f"sudo iptables -A FORWARD -s {device_ip} -p udp -d {ip} -j DROP")
                    self.run_command(f"sudo iptables -A OUTPUT -s {device_ip} -p udp -d {ip} -j DROP")

        # 4) –ë–ª–æ–∫–∏—Ä—É–µ–º DNS —á–µ—Ä–µ–∑ /etc/hosts
        if self.block_dns:
            for domain in self.dns_list:
                self.run_command(f"echo '127.0.0.1 {domain}' | sudo tee -a /etc/hosts")

        # 5) –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä –∏ —á–∏—Å—Ç–∏–º –∫—ç—à
        self.run_command("sudo systemctl restart systemd-resolved")
        self.run_command("sudo resolvectl flush-caches")

        logging.info(f"‚úÖ {self.__class__.__name__} —É–Ω–∏—á—Ç–æ–∂–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤!")

    def unlock(self):
        logging.info(f"‚õî –û—Ç–∫–ª—é—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É {self.__class__.__name__}...")
        # 1) –ß–∏—Å—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞
        self.run_command("sudo iptables -F")
        # 2) –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ARP-—Å–ø—É—Ñ–∏–Ω–≥
        self.disable_arp_spoofing()

        # 3) –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ DNS –∏–∑ hosts
        for domain in self.dns_list:
            self.run_command(f"sudo sed -i '/{domain}/d' /etc/hosts")

        # 4) –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä –∏ —á–∏—Å—Ç–∏–º –∫—ç—à
        self.run_command("sudo systemctl restart systemd-resolved")
        self.run_command("sudo resolvectl flush-caches")

        logging.info(f"‚úÖ {self.__class__.__name__} —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!")

    def enable_arp_spoofing(self):
        logging.info(f"üöÄ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ {self.interface} –¥–ª—è {self.target_devices_list}...")
        for device_ip in self.target_devices_list:
            self.run_command(
                f"cd ~/Programs/bettercap && sudo go run main.go -eval 'set arp.spoof.targets {device_ip}; arp.spoof on' &"
            )

    def disable_arp_spoofing(self):
        logging.info("‚õî –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ARP-—Å–ø—É—Ñ–∏–Ω–≥...")
        self.run_command("sudo pkill bettercap")

    def run_command(self, cmd):
        try:
            subprocess.run(cmd, shell=True, check=True)
            logging.info(f"‚úÖ {cmd}")
        except subprocess.CalledProcessError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

class BaseMixinInfo:
    target_devices_list = ["192.168.1.110"]

class Roblox(BaseMixinInfo, BaseLocker):
    dns_list = [
        "roblox.com",
        "www.roblox.com",
        "api.roblox.com",
        "games.roblox.com",
        "setup.roblox.com",
        "assetgame.roblox.com",
        "presence.roblox.com"
    ]
    ip_list = [
        "128.116.0.0/16",
        "185.221.0.0/16",
        "23.82.0.0/16",
        "45.10.0.0/16",
        "103.252.0.0/16"
    ]

class TikTok(BaseMixinInfo, BaseLocker):
    dns_list = [
        "tiktok.com",
        "www.tiktok.com",
        "api.tiktok.com",
        "m.tiktok.com",
        "m.tiktokcdn.com"
    ]
    ip_list = [
        "47.244.0.0/16",
        "123.206.0.0/16"
    ]

class Facebook(BaseMixinInfo, BaseLocker):
    dns_list = [
        "facebook.com",
        "www.facebook.com",
        "api.facebook.com",
        "m.facebook.com",
        "m.facebook.com"
    ]
    

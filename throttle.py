import subprocess
import logging
import json

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
CONFIG_FILE = "throttle_config.json"

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(CONFIG_FILE, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        logging.error("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {}

config = load_config()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
INTERFACE = config.get("interface", "eno1")
ROUTER_IP = config.get("router_ip", "192.168.1.1")
TARGET_DEVICES = config.get("target_devices", [])
ROBLOX_IP_RANGES = config.get("roblox_ip_ranges", [])
ROBLOX_PORTS = config.get("roblox_ports", [])
DNS_BLOCK = config.get("dns_block", [])
TIKTOK_IP_RANGES = config.get("tiktok_ip_ranges", [])
TIKTOK_DNS = config.get("tiktok_dns", [])
BLOCK_UDP = config.get("block_udp", True)
BLOCK_DNS = config.get("block_dns", True)

def run_command(cmd):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."""
    try:
        subprocess.run(cmd, shell=True, check=True)
        logging.info(f"‚úÖ {cmd}")
    except subprocess.CalledProcessError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def enable_arp_spoofing():
    """–ó–∞–ø—É—Å–∫–∞–µ–º ARP-—Å–ø—É—Ñ–∏–Ω–≥ –¢–û–õ–¨–ö–û –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    logging.info(f"üöÄ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ {INTERFACE} –¥–ª—è {TARGET_DEVICES}...")
    for device_ip in TARGET_DEVICES:
        run_command(f"cd ~/Programs/bettercap && sudo go run main.go -eval 'set arp.spoof.targets {device_ip}; arp.spoof on' &")

def disable_arp_spoofing():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ARP-—Å–ø—É—Ñ–∏–Ω–≥."""
    logging.info("‚õî –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ARP-—Å–ø—É—Ñ–∏–Ω–≥...")
    run_command("sudo pkill bettercap")

def block_roblox():
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä—É–µ–º —Ç—Ä–∞—Ñ–∏–∫ Roblox –¢–û–õ–¨–ö–û –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    logging.info("‚õî –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ Roblox –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    run_command("sudo iptables -F")

    for device_ip in TARGET_DEVICES:
        # –ë–ª–æ–∫–∏—Ä—É–µ–º IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        for ip_range in ROBLOX_IP_RANGES:
            run_command(f"sudo iptables -A FORWARD -s {device_ip} -d {ip_range} -j DROP")
            run_command(f"sudo iptables -A OUTPUT -s {device_ip} -d {ip_range} -j DROP")
            if BLOCK_UDP:
                run_command(f"sudo iptables -A FORWARD -s {device_ip} -p udp -d {ip_range} -j DROP")
                run_command(f"sudo iptables -A OUTPUT -s {device_ip} -p udp -d {ip_range} -j DROP")

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—ã–µ –ø–æ—Ä—Ç—ã
        for port in ROBLOX_PORTS:
            run_command(f"sudo iptables -A FORWARD -s {device_ip} -p udp --dport {port} -j DROP")
            run_command(f"sudo iptables -A OUTPUT -s {device_ip} -p udp --dport {port} -j DROP")

    # –ë–ª–æ–∫–∏—Ä—É–µ–º DNS-–∑–∞–ø—Ä–æ—Å—ã Roblox
    if BLOCK_DNS:
        for domain in DNS_BLOCK:
            run_command(f"echo '127.0.0.1 {domain}' | sudo tee -a /etc/hosts")

    # –ß–∏—Å—Ç–∏–º –∫—ç—à DNS
    run_command("sudo systemctl restart systemd-resolved")
    run_command("sudo resolvectl flush-caches")

    logging.info("‚úÖ Roblox —É–Ω–∏—á—Ç–æ–∂–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤!")

def unblock_roblox():
    """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º Roblox –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    logging.info("‚õî –û—Ç–∫–ª—é—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Roblox...")
    run_command("sudo iptables -F")
    run_command("sudo sed -i '/roblox.com/d' /etc/hosts")
    run_command("sudo systemctl restart systemd-resolved")
    run_command("sudo resolvectl flush-caches")
    logging.info("‚úÖ Roblox —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!")

def block_tiktok():
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä—É–µ–º —Ç—Ä–∞—Ñ–∏–∫ TikTok –¢–û–õ–¨–ö–û –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    logging.info("‚õî –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ TikTok –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")

    # –ë–ª–æ–∫–∏—Ä—É–µ–º IP-–∞–¥—Ä–µ—Å–∞ TikTok –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    for device_ip in TARGET_DEVICES:
        for ip_range in TIKTOK_IP_RANGES:
            run_command(f"sudo iptables -A FORWARD -s {device_ip} -d {ip_range} -j DROP")
            run_command(f"sudo iptables -A OUTPUT -s {device_ip} -d {ip_range} -j DROP")
            if BLOCK_UDP:
                run_command(f"sudo iptables -A FORWARD -s {device_ip} -p udp -d {ip_range} -j DROP")
                run_command(f"sudo iptables -A OUTPUT -s {device_ip} -p udp -d {ip_range} -j DROP")

    # –ë–ª–æ–∫–∏—Ä—É–µ–º DNS-–∑–∞–ø—Ä–æ—Å—ã TikTok
    if BLOCK_DNS:
        for domain in TIKTOK_DNS:
            run_command(f"echo '127.0.0.1 {domain}' | sudo tee -a /etc/hosts")

    # –ß–∏—Å—Ç–∏–º –∫—ç—à DNS
    run_command("sudo systemctl restart systemd-resolved")
    run_command("sudo resolvectl flush-caches")

    logging.info("‚úÖ TikTok —É–Ω–∏—á—Ç–æ–∂–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤!")

def unblock_tiktok():
    """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º TikTok –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    logging.info("‚õî –û—Ç–∫–ª—é—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É TikTok...")
    run_command("sudo sed -i '/tiktok.com/d' /etc/hosts")
    run_command("sudo iptables -F")
    run_command("sudo systemctl restart systemd-resolved")
    run_command("sudo resolvectl flush-caches")
    logging.info("‚úÖ TikTok —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!")

if __name__ == "__main__":
    while True:
        action = input("üíÄ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (block/unblock/blocktiktok/unblocktiktok/exit): ").strip().lower()
        if action == "block":
            enable_arp_spoofing()
            block_roblox()
        elif action == "unblock":
            disable_arp_spoofing()
            unblock_roblox()
        elif action == "blocktiktok":
            enable_arp_spoofing()
            block_tiktok()
        elif action == "unblocktiktok":
            disable_arp_spoofing()
            unblock_tiktok()
        elif action == "exit":
            disable_arp_spoofing()
            break
        else:
            print("üö® –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'block', 'unblock', 'blocktiktok', 'unblocktiktok' –∏–ª–∏ 'exit'")
